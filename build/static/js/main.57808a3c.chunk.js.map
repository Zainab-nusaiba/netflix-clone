{"version":3,"sources":["axios.js","Row.js","requests.js","Banner.js","Nav.js","App.js","reportWebVitals.js","index.js"],"names":["instance","axios","create","baseURL","Row","title","fetchUrl","isLargeRow","useState","movies","setMovies","trailerUrl","setTrailerUrl","useEffect","a","get","request","data","results","fetchData","console","log","className","map","movie","onClick","movieTrailer","name","then","url","urlParams","URLSearchParams","URL","search","catch","error","handleClick","src","poster_path","backdrop_path","alt","id","videoId","opts","height","width","playerVars","autoPlay","API_KEY","requests","fetchTrending","fetchNetflixOriginals","fetchTopRated","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanceMovies","fetchDocumentaries","Banner","str","n","setMovie","Math","floor","random","length","style","backgroundSize","backgroundImage","backgroundPosition","original_name","class","overview","substr","Nav","show","handleShow","window","addEventListener","scrollY","removeEventListener","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.57808a3c.chunk.js","sourcesContent":["import axios from \"axios\";\n\nconst instance = axios.create({\n    baseURL: 'https://api.themoviedb.org/3',\n});\n\n// instance.get('/foo-bar'); good way to make requests like this\n// output: http://api.themoviedb.org/3/foo-bar\n\nexport default instance;","import React,{ useState, useEffect } from 'react';\nimport YouTube from 'react-youtube';\nimport axios from './axios.js';\nimport \"./Row.css\";\nimport movieTrailer from 'movie-trailer';\n\nconst base_url = \"https://image.tmdb.org/t/p/original/\";\n\nfunction Row({ title, fetchUrl, isLargeRow }) { \n    const [movies, setMovies] = useState([]);\n    const [trailerUrl, setTrailerUrl] = useState(\"\");\n\n    //make a requests to tmdb for the image/poster everytime the row loads\n    useEffect(() => { \n        //if [],run once when the row loads, and don't run again\n        async function fetchData() { \n            const request = await axios.get(fetchUrl);\n            // 'http://api.themoviedb.org/3'concatenating wid requests.js urls \n\n            setMovies(request.data.results);//inside our arr\n            return request;\n        }\n        fetchData();\n        //if there is any variable pulled from outside the useEffect we for sure havve put it inside the[] below cuz it's a dependency now \n    }, [fetchUrl]);\n\n    console.log(movies);\n\n    const opts = {\n        height: '390',\n        width: '100%',\n        playerVars: {\n            //https://developers.google.com/youtube/player_parameters\n            autoPlay: 1,\n        },\n    };\n\n    const handleClick = (movie) => {\n        //when the user clicks on the picture \n        //onClick={() => handleClick(movie)} does this from below\n        if(trailerUrl){\n            setTrailerUrl(\"\");\n        } else {\n            movieTrailer(movie?.name || \"\")\n                .then((url) => {\n                    //eg. https://youtu.be/yGY484EPe5U - v need only yGY484EPe5U\n                    const urlParams = new URLSearchParams(new URL(url).search);\n                    setTrailerUrl(urlParams.get(\"v\"));\n                })\n                .catch((error) => console.log(error));\n        }\n    };\n\n    return (\n        <div className=\"row\">\n            <h2>{title}</h2>\n            \n            <div className=\"row__posters\">\n                {/* container -> posters */}\n                {/* inside a container to scroll */}\n\n                {movies.map((movie) => (\n                    <img \n                    key={movie.id}\n                    onClick={() => handleClick(movie)}\n                    className={`row__poster ${isLargeRow && \"row__posterLarge\"}`} //row__poster for everything but if isLargeRow den row__posterLarge\n                    src={`${base_url}${ isLargeRow ? movie.poster_path : movie.backdrop_path}`} \n                    alt={movie.name} \n                    />\n                ))}\n            </div>\n            {trailerUrl && <YouTube videoId={trailerUrl} opts={opts} /> }\n        </div>\n    )\n}\n\nexport default Row;\n\nÂ ","const API_KEY = \"4bf24870045a5186b88ef1a6acd18307\";\n\nconst requests = {\n    fetchTrending: `/trending/all/week?api_key=${API_KEY}&language=en-US`, \n    fetchNetflixOriginals: `/discover/tv?api_key=${API_KEY}&with_networks=213`,    \n    fetchTopRated: `/movie/top_rated?api_key=${API_KEY}&language=en-US`, \n    fetchActionMovies: `/discover/movie?api_key=${API_KEY}&with_genres=28`,    \n    fetchComedyMovies: `/discover/movie?api_key=${API_KEY}&with_genres=35`,    \n    fetchHorrorMovies: `/discover/movie?api_key=${API_KEY}&with_genres=27`,    \n    fetchRomanceMovies: `/discover/movie?api_key=${API_KEY}&with_genres=10749`,\n    fetchDocumentaries: `/discover/movie?api_key=${API_KEY}&with_genres=99`,    \n}\n\nexport default requests;","import React,{useState, useEffect} from 'react'\nimport axios from './axios.js'\nimport requests from './requests.js';\nimport './Banner.css';\n\nfunction Banner() {\n    const [movie,setMovie] = useState([]);\n\n    //logic - gives a new movie banner whenever refreshed\n    useEffect(() => {\n        async function fetchData() {\n            const request = await axios.get(requests.fetchNetflixOriginals);\n            setMovie(\n                request.data.results[\n                    Math.floor(Math.random() * request.data.results.length - 1)\n                ]\n            );\n            return request;\n        }\n        fetchData();\n    }, []);\n    console.log(movie);\n\n    function truncate(str,n) {\n        return str?.length > n ? str.substr(0,n-1) + \"...\" : str;\n    }\n\n    return (\n        <header className=\"banner\"\n            style={{\n                backgroundSize:\"cover\",\n                backgroundImage: `url(\n                    \"https://image.tmdb.org/t/p/original/${movie?.backdrop_path}\"\n                )`,\n                backgroundPosition: \"center center\",\n            }}\n        >\n            <div className=\"banner__contents\">\n                <h1 className=\"banner__title\">\n                    {movie?.title || movie?.name || movie?.original_name}\n                </h1>\n                <div class=\"banner__buttons\">\n                    <button class=\"banner__button\">Play</button>\n                    <button class=\"banner__button\">My List</button>\n                </div>\n                <h1 className=\"banner__description\">{truncate(movie?.overview,150)}</h1>\n\n            </div>\n            {/* Background image */}\n            {/* title */}\n            {/* div > 2 buttons - Play & My List */}\n            {/* truncated description very useful */}\n\n            <div className=\"banner--fadeBottom\" />\n\n        </header>\n    )\n}\n\nexport default Banner\n","import React,{useState, useEffect} from 'react';\nimport \"./Nav.css\"\n\nfunction Nav() {\n\n    const [show,handleShow] = useState(false);\n\n    useEffect(() => {\n        window.addEventListener(\"scroll\", () => {\n            if(window.scrollY > 100) {\n                handleShow(true);\n            }else handleShow(false);\n        });\n        return () => {\n            window.removeEventListener(\"scroll\");\n            // so that the scroll event is not fired when the window is closed + to avoid multiple EventListeners\n        };\n    },[]);\n\n    return (\n        <div className={`nav ${show && \"nav__black\"}`}>\n            <img \n                className=\"nav__logo\" \n                src=\"https://upload.wikimedia.org/wikipedia/commons/0/0c/Netflix_2014_logo.svg\"            \n                alt=\"Netflix Logo\" \n            />\n            <img \n                className=\"nav__avatar\" \n                src=\"https://upload.wikimedia.org/wikipedia/commons/0/0b/Netflix-avatar.png\" \n                alt=\"Netflix Avatar\" \n            />\n        </div>\n    )\n}\n\nexport default Nav\n","import React from 'react'\nimport './App.css';\nimport Row from './Row.js';\nimport requests from './requests.js';\nimport Banner from './Banner.js';\nimport Nav from './Nav.js';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n\n      {/* component1 : Navbar */}\n      {/* component2 : Banner */}\n      {/* component3 : Row-reusing from our Row.js file */}\n\n      <Nav />\n      <Banner />\n\n      <Row \n        title = \"NETFLIX ORIGINALS\" \n        fetchUrl={requests.fetchNetflixOriginals} \n        isLargeRow //default is ={true} hence omitting\n      />\n      <Row title = \"Trending now\" fetchUrl={requests.fetchTrending}/>\n      <Row title = \"Top Rated\" fetchUrl={requests.fetchTopRated} />\n      <Row title = \"Action Movies\" fetchUrl={requests.fetchActionMovies} />\n      <Row title = \"Comedy Movies\" fetchUrl={requests.fetchComedyMovies} />\n      <Row title = \"Horror Movies\" fetchUrl={requests.fetchHorrorMovies} />\n      <Row title = \"Romance Movies\" fetchUrl={requests.fetchRomanceMovies} />\n      <Row title = \"Documentaries\" fetchUrl={requests.fetchDocumentaries} />\n\n    </div>\n  );\n}\n\nexport default App;\n\n ","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}